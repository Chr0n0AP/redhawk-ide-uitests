<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties PUBLIC "-//JTRS//DTD SCA V2.2.2 PRF//EN" "properties.dtd">
<properties>
  <simple id="DCE:cdc5ee18-7ceb-4ae6-bf4c-31f983179b4d" mode="readonly" name="device_kind" type="string">
    <description>This specifies the device kind</description>
    <value>FRONTEND::TUNER</value>
    <kind kindtype="configure"/>
    <kind kindtype="allocation"/>
    <action type="eq"/>
  </simple>
  <simple id="DCE:0f99b2e4-9903-4631-9846-ff349d18ecfb" mode="readonly" name="device_model" type="string">
    <description> This specifies the specific device</description>
    <value>RX_DIGITIZER simulator</value>
    <kind kindtype="configure"/>
    <kind kindtype="allocation"/>
    <action type="eq"/>
  </simple>
  <structsequence id="FRONTEND::tuner_status" mode="readonly" name="frontend_tuner_status">
    <description>Status of each tuner, including entries for both allocated and un-allocated tuners. Each entry represents a single tuner.</description>
    <struct id="FRONTEND::tuner_status_struct" name="frontend_tuner_status_struct">
      <simple id="FRONTEND::tuner_status::complex" name="complex" type="boolean">
        <description>Indicates if the output data is complex.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::output_vlan" name="output_vlan" type="long">
        <description>VLAN number for SDDS output. A value of zero (0) indicates no VLAN is used.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::agc" name="agc" type="boolean">
        <description>Indicates if the tuner has Automatic Gain Control enabled.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::bandwidth" name="bandwidth" type="double">
        <description>Current bandwidth in Hz</description>
        <units>Hz</units>
      </simple>
      <simple id="FRONTEND::tuner_status::valid" name="valid" type="boolean">
        <description>Indicates if the tuner is in a valid state. For DDCs, false indicates the attached CHANNELIZER has moved such that the DDC can no longer tune to the appropriate frequency.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::reference_source" name="reference_source" type="long">
        <description>Indicates internal (0) vs external (1) reference source.</description>
        <enumerations>
          <enumeration label="INTERNAL" value="0"/>
          <enumeration label="EXTERNAL" value="1"/>
        </enumerations>
      </simple>
      <simple id="FRONTEND::tuner_status::enabled" name="enabled" type="boolean">
        <description>Indicates if tuner is enabled, in reference to the output state of the tuner.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::tuner_number" name="tuner_number" type="short">
        <description>Physical tuner ID.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::allocation_id_csv" name="allocation_id_csv" type="string">
        <description>Comma separated list of current Allocation IDs.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::rf_flow_id" name="rf_flow_id" type="string">
        <description>Specifies a certain RF flow to allocate against.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::available_frequency" name="available_frequency" type="string">
        <description>Available frequencies (Hz) in range (XX-YY) or csv (X,Y,Z) format. Do not put units in field.</description>
        <units>Hz</units>
      </simple>
      <simple id="FRONTEND::tuner_status::sample_rate_tolerance" name="sample_rate_tolerance" type="double">
        <description>Allowable percentage over requested sample rate. This value is provided by the requester during allocation.</description>
        <units>%</units>
      </simple>
      <simple id="FRONTEND::tuner_status::output_format" name="output_format" type="string">
        <description>Indicates the SDDS digraph that describes the current output data format.</description>
        <enumerations>
          <enumeration label="SDDS_SP" value="SDDS_SP"/>
          <enumeration label="SDDS_SB" value="SDDS_SB"/>
          <enumeration label="SDDS_SI" value="SDDS_SI"/>
          <enumeration label="SDDS_SL" value="SDDS_SL"/>
          <enumeration label="SDDS_SX" value="SDDS_SX"/>
          <enumeration label="SDDS_SF" value="SDDS_SF"/>
          <enumeration label="SDDS_SD" value="SDDS_SD"/>
          <enumeration label="SDDS_CB" value="SDDS_CB"/>
          <enumeration label="SDDS_CI" value="SDDS_CI"/>
          <enumeration label="SDDS_CL" value="SDDS_CL"/>
          <enumeration label="SDDS_CX" value="SDDS_CX"/>
          <enumeration label="SDDS_CF" value="SDDS_CF"/>
          <enumeration label="SDDS_CD" value="SDDS_CD"/>
        </enumerations>
      </simple>
      <simple id="FRONTEND::tuner_status::group_id" name="group_id" type="string">
        <description>Unique ID that specifies a group of Device.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::sample_rate" name="sample_rate" type="double">
        <description>Current sample rate in samples per second.</description>
        <units>sps</units>
      </simple>
      <simple id="FRONTEND::tuner_status::available_gain" name="available_gain" type="string">
        <description>Available gain (dB) in range (XX-YY) or csv (X,Y,Z) format. Do not put units in field.</description>
        <units>dB</units>
      </simple>
      <simple id="FRONTEND::tuner_status::available_sample_rate" name="available_sample_rate" type="string">
        <description>Available sample_rate (sps) in range (XX-YY) or csv (X,Y,Z) format. Do not put units in field.</description>
        <units>sps</units>
      </simple>
      <simple id="FRONTEND::tuner_status::center_frequency" name="center_frequency" type="double">
        <description>Current center frequency in Hz.</description>
        <units>Hz</units>
      </simple>
      <simple id="FRONTEND::tuner_status::decimation" name="decimation" type="long">
        <description>Current decimation of tuner. For DDC tuners, this is the ratio of input sample rate to output sample rate regardless of data format.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::gain" name="gain" type="double">
        <description>Current gain in dB.</description>
        <units>dB</units>
      </simple>
      <simple id="FRONTEND::tuner_status::bandwidth_tolerance" name="bandwidth_tolerance" type="double">
        <description>Allowable percentage over requested bandwidth. This value is provided by the requester during allocation.</description>
        <units>%</units>
      </simple>
      <simple id="FRONTEND::tuner_status::available_bandwidth" name="available_bandwidth" type="string">
        <description>Available bandwidth (Hz) in range (XX-YY) or csv (X,Y,Z) format. Do not put units in field.</description>
        <units>Hz</units>
      </simple>
      <simple id="FRONTEND::tuner_status::output_multicast" name="output_multicast" type="string">
        <description>Multicast address for SDDS output.</description>
      </simple>
      <simple id="FRONTEND::tuner_status::tuner_type" name="tuner_type" type="string">
        <description>Example Tuner Types: TX, RX, CHANNELIZER, DDC, RX_DIGITIZER, RX_DIGTIZIER_CHANNELIZER</description>
      </simple>
      <simple id="FRONTEND::tuner_status::output_port" name="output_port" type="long">
        <description>Port number for SDDS output.</description>
      </simple>
    </struct>
    <configurationkind kindtype="configure"/>
  </structsequence>
  <struct id="FRONTEND::listener_allocation" name="frontend_listener_allocation">
    <description>Allocates a listener (subscriber) based off a previous allocation </description>
    <simple id="FRONTEND::listener_allocation::existing_allocation_id" name="existing_allocation_id" type="string">
      <description></description>
    </simple>
    <simple id="FRONTEND::listener_allocation::listener_allocation_id" name="listener_allocation_id" type="string">
      <description></description>
    </simple>
    <configurationkind kindtype="allocation"/>
  </struct>
  <struct id="FRONTEND::tuner_allocation" name="frontend_tuner_allocation">
    <description>Frontend Interfaces v2.0 main allocation structure</description>
    <simple id="FRONTEND::tuner_allocation::tuner_type" name="tuner_type" type="string">
      <description>Example Tuner Types: TX, RX, CHANNELIZER, DDC, RX_DIGITIZER, RX_DIGTIZIER_CHANNELIZER</description>
    </simple>
    <simple id="FRONTEND::tuner_allocation::allocation_id" name="allocation_id" type="string">
      <description>The allocation_id set by the caller. Used by the caller to reference the device uniquely</description>
    </simple>
    <simple id="FRONTEND::tuner_allocation::center_frequency" name="center_frequency" type="double">
      <description>Requested center frequency.</description>
      <value>0.0</value>
      <units>Hz</units>
    </simple>
    <simple id="FRONTEND::tuner_allocation::bandwidth" name="bandwidth" type="double">
      <description>Requested Bandwidth</description>
      <value>0.0</value>
      <units>Hz</units>
    </simple>
    <simple id="FRONTEND::tuner_allocation::bandwidth_tolerance" name="bandwidth_tolerance" type="double">
      <description>Allowable Percent above requested bandwidth  (ie - 100 would be up to twice)</description>
      <value>10.0</value>
      <units>percent</units>
    </simple>
    <simple id="FRONTEND::tuner_allocation::sample_rate" name="sample_rate" type="double">
      <description>Requested sample rate. This can be ignored for such devices as analog tuners</description>
      <value>0.0</value>
      <units>sps</units>
    </simple>
    <simple id="FRONTEND::tuner_allocation::sample_rate_tolerance" name="sample_rate_tolerance" type="double">
      <description>Allowable Percent above requested sample rate (ie - 100 would be up to twice)</description>
      <value>10.0</value>
      <units>percent</units>
    </simple>
    <simple id="FRONTEND::tuner_allocation::device_control" name="device_control" type="boolean">
      <description>True: Has control over the device to make changes
False: Does not need control and can just attach to any currently tasked device that satisfies the parameters (essentually a listener)</description>
      <value>true</value>
    </simple>
    <simple id="FRONTEND::tuner_allocation::group_id" name="group_id" type="string">
      <description>Unique identifier that specifies a group of device. Must match group_id on the device</description>
    </simple>
    <simple id="FRONTEND::tuner_allocation::rf_flow_id" name="rf_flow_id" type="string">
      <description>Optional. Specifies a certain RF flow to allocate against. If left empty, it will match all frontend devices.</description>
    </simple>
    <configurationkind kindtype="allocation"/>
  </struct>
  <structsequence id="connectionTable">
    <struct id="connection_descriptor">
      <simple id="connection_name" type="string">
        <kind kindtype="configure"/>
      </simple>
      <simple id="stream_id" type="string">
        <kind kindtype="configure"/>
      </simple>
      <simple id="port_name" type="string">
        <kind kindtype="configure"/>
      </simple>
    </struct>
    <configurationkind kindtype="configure"/>
  </structsequence>
  <struct id="SIM::listener_allocation" mode="readwrite" name="sim_listener_allocation">
    <description>Allocates a listener (subscriber) based off a previous allocation </description>
    <simple id="SIM::listener_allocation::action" name="action" type="string">
      <value>NONE</value>
      <enumerations>
        <enumeration label="NONE" value="NONE"/>
        <enumeration label="ALLOCATE" value="ALLOCATE"/>
        <enumeration label="DEALLOCATE" value="DEALLOCATE"/>
      </enumerations>
    </simple>
    <simple id="SIM::listener_allocation::existing_allocation_id" mode="readwrite" name="existing_allocation_id" type="string">
      <value></value>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="SIM::listener_allocation::listener_allocation_id" mode="readwrite" name="listener_allocation_id" type="string">
      <value></value>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <configurationkind kindtype="configure"/>
  </struct>
  <struct id="SIM::tuner_allocation" mode="readwrite" name="sim_tuner_allocation">
    <description>Frontend Interfaces v2.0 main allocation structure</description>
    <simple id="SIM::tuner_allocation::action" name="action" type="string">
      <value>NONE</value>
      <enumerations>
        <enumeration label="NONE" value="NONE"/>
        <enumeration label="ALLOCATE" value="ALLOCATE"/>
        <enumeration label="DEALLOCATE" value="DEALLOCATE"/>
      </enumerations>
    </simple>
    <simple id="SIM::tuner_allocation::tuner_type" mode="readwrite" name="tuner_type" type="string">
      <description>Example Tuner Types: TX, RX, CHANNELIZER, DDC, RX_DIGITIZER, RX_DIGTIZIER_CHANNELIZER</description>
      <value>RX_DIGITIZER</value>
      <enumerations>
        <enumeration label="RX_DIGITIZER" value="RX_DIGITIZER"/>
      </enumerations>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="SIM::tuner_allocation::allocation_id" mode="readwrite" name="allocation_id" type="string">
      <description>The allocation_id set by the caller. Used by the caller to reference the device uniquely</description>
      <value></value>
      <kind kindtype="configure"/>
    </simple>
    <simple id="SIM::tuner_allocation::center_frequency" mode="readwrite" name="center_frequency" type="double">
      <description>Requested center frequency.</description>
      <value>0.0</value>
      <units>Hz</units>
      <kind kindtype="configure"/>
    </simple>
    <simple id="SIM::tuner_allocation::bandwidth" mode="readwrite" name="bandwidth" type="double">
      <description>Requested Bandwidth</description>
      <value>0.0</value>
      <units>Hz</units>
      <kind kindtype="configure"/>
    </simple>
    <simple id="SIM::tuner_allocation::bandwidth_tolerance" mode="readwrite" name="bandwidth_tolerance" type="double">
      <description>Allowable Percent above requested bandwidth  (ie - 100 would be up to twice)</description>
      <value>20.0</value>
      <units>percent</units>
      <kind kindtype="configure"/>
    </simple>
    <simple id="SIM::tuner_allocation::sample_rate" mode="readwrite" name="sample_rate" type="double">
      <description>Requested sample rate. This can be ignored for such devices as analog tuners</description>
      <value>0.0</value>
      <units>sps</units>
      <kind kindtype="configure"/>
    </simple>
    <simple id="SIM::tuner_allocation::sample_rate_tolerance" mode="readwrite" name="sample_rate_tolerance" type="double">
      <description>Allowable Percent above requested sample rate (ie - 100 would be up to twice)</description>
      <value>20.0</value>
      <units>percent</units>
      <kind kindtype="configure"/>
    </simple>
    <simple id="SIM::tuner_allocation::device_control" mode="readwrite" name="device_control" type="boolean">
      <description>True: Has control over the device to make changes
False: Does not need control and can just attach to any currently tasked device that satisfies the parameters (essentually a listener)</description>
      <value>true</value>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="SIM::tuner_allocation::group_id" mode="readwrite" name="group_id" type="string">
      <description>Unique identifier that specifies a group of device. Must match group_id on the device</description>
      <value></value>
      <kind kindtype="configure"/>
    </simple>
    <simple id="SIM::tuner_allocation::rf_flow_id" mode="readwrite" name="rf_flow_id" type="string">
      <description>Optional. Specifies a certain RF flow to allocate against. If left empty, it will match all frontend devices.</description>
      <value></value>
      <kind kindtype="configure"/>
    </simple>
    <configurationkind kindtype="configure"/>
  </struct>
  <structsequence id="simulated_channel_seq" mode="readwrite" name="simulated_channel_seq">
    <description>Describes the channels found in this sim device</description>
    <struct id="sim_channel_struct" name="sim_channel_struct">
      <simple id="sim::tuner_type" name="tuner_type" type="string">
        <value>RX_DIGITIZER</value>
        <kind kindtype="configure"/>
        <action type="external"/>
      </simple>
      <simple id="sim::freq_min" name="freq_min" type="double">
        <value>0.0</value>
        <units>Hz</units>
        <kind kindtype="configure"/>
        <action type="external"/>
      </simple>
      <simple id="sim::freq_max" name="freq_max" type="double">
        <value>0.0</value>
        <units>Hz</units>
        <kind kindtype="configure"/>
        <action type="external"/>
      </simple>
      <simple id="sim::actual_freq" name="actual_freq" type="double">
        <value>0.0</value>
        <units>Hz</units>
      </simple>
      <simple id="sim::bw_min" name="bw_min" type="double">
        <value>0.0</value>
        <units>Hz</units>
        <kind kindtype="configure"/>
        <action type="external"/>
      </simple>
      <simple id="sim::bw_max" name="bw_max" type="double">
        <value>0.0</value>
        <units>Hz</units>
        <kind kindtype="configure"/>
        <action type="external"/>
      </simple>
      <simple id="sim::bw_resolution" name="bw_resolution" type="double">
        <value>0.0</value>
        <units>Hz</units>
      </simple>
      <simple id="sim::actual_bw" name="actual_bw" type="double">
        <value>0.0</value>
        <units>Hz</units>
      </simple>
      <simple id="sim::rate_min" name="rate_min" type="double">
        <value>0.0</value>
        <units>sps</units>
        <kind kindtype="configure"/>
        <action type="external"/>
      </simple>
      <simple id="sim::rate_max" name="rate_max" type="double">
        <value>0.0</value>
        <units>sps</units>
        <kind kindtype="configure"/>
        <action type="external"/>
      </simple>
      <simple id="sim::rate_resolution" name="rate_resolution" type="double">
        <value>0.0</value>
        <units>sps</units>
      </simple>
      <simple id="sim::actual_rate" name="actual_rate" type="double">
        <value>0.0</value>
        <units>sps</units>
      </simple>
      <simple id="sim::sim::gain_min" name="gain_min" type="double">
        <value>0.0</value>
        <units>dB</units>
        <kind kindtype="configure"/>
        <action type="external"/>
      </simple>
      <simple id="sim::gain_max" name="gain_max" type="double">
        <value>0.0</value>
        <units>dB</units>
        <kind kindtype="configure"/>
        <action type="external"/>
      </simple>
      <simple id="sim::gain_resolution" name="gain_resolution" type="double">
        <value>0.0</value>
        <units>dB</units>
      </simple>
      <simple id="sim::actual_gain" name="actual_gain" type="double">
        <value>0.0</value>
        <units>dB</units>
      </simple>
      <configurationkind kindtype="configure"/>
    </struct>
    <structvalue>
      <simpleref refid="sim::tuner_type" value="RX_DIGITIZER"/>
      <simpleref refid="sim::freq_min" value="28750000.0"/>
      <simpleref refid="sim::freq_max" value="2240000000.0"/>
      <simpleref refid="sim::actual_freq" value="0"/>
      <simpleref refid="sim::bw_min" value="4000000.0"/>
      <simpleref refid="sim::bw_max" value="40000000.0"/>
      <simpleref refid="sim::bw_resolution" value="0.0"/>
      <simpleref refid="sim::actual_bw" value="0"/>
      <simpleref refid="sim::rate_min" value="1000000.0"/>
      <simpleref refid="sim::rate_max" value="100000000.0"/>
      <simpleref refid="sim::rate_resolution" value="0.0"/>
      <simpleref refid="sim::actual_rate" value="0"/>
      <simpleref refid="sim::sim::gain_min" value="0.0"/>
      <simpleref refid="sim::gain_max" value="38.0"/>
      <simpleref refid="sim::gain_resolution" value="0.0"/>
      <simpleref refid="sim::actual_gain" value="0"/>
    </structvalue>
    <configurationkind kindtype="configure"/>
  </structsequence>
  <simple id="samples_per_packet" mode="readwrite" type="ulong">
    <value>1024</value>
    <units>samples</units>
    <kind kindtype="configure"/>
    <action type="external"/>
  </simple>
</properties>
